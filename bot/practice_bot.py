import os
import logging
import paramiko
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler
from functools import partial
import json
from psycopg2 import sql
import psycopg2
from psycopg2 import Error
from pathlib import Path
import subprocess

logging.basicConfig(filename='logfile.txt', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logging.info("–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ. –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è: " + logging._levelToName[logging.root.level])

TOKEN = os.getenv('TOKEN')
SSH_USERNAME = os.getenv('RM_USER')
SSH_PASSWORD = os.getenv('RM_PASSWORD')
SSH_HOST = os.getenv('RM_HOST')
SSH_PORT = os.getenv('RM_PORT')
PSQL_USERNAME = os.getenv('DB_USER')
PSQL_PASSWORD = os.getenv('DB_PASSWORD')
PSQL_HOST = os.getenv('DB_HOST')
PSQL_PORT = os.getenv('DB_PORT')
PSQL_DATABASE_NAME = os.getenv('DB_DATABASE')
logging.info("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.info("–°—á–∏—Ç—ã–≤–∞–Ω–∏–µ help —Å–æ–æ–±—â–µ–Ω–∏—è")
help_message = "–•–º, –ø–æ—Ö–æ–∂–µ, —á—Ç–æ help —Å–æ–æ–±—â–µ–µ–Ω–∏–µ –≥–¥–µ-—Ç–æ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å ü§îü§îü§î" # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–µ —É–¥–∞—Å—Ç—å—Å—è —Å—á–∏—Ç–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ 
try:
    with open("help_message.txt", "r") as fp:
        help_message = fp.read()
except Exception as e:
    logging.critical("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ help —Å–æ–æ–±—â–µ–Ω–∏—è: " + repr(e))
logging.info("–°—á–∏—Ç—ã–≤–∞–Ω–∏–µ help —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–æ")

last_regexp_read = []

def ssh_connect():
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(hostname=SSH_HOST, username=SSH_USERNAME, password=SSH_PASSWORD, port=SSH_PORT)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ssh: " + repr(e))
        return None
    logging.info("–ü—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ssh")
    return client

def find_command(update: Update, context, reply_text: str, next_step: str):
    logging.info("–í—ã–∑–≤–∞–Ω find_command. –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: " + reply_text + "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: " + next_step)
    update.message.reply_text(reply_text)
    return next_step

def find(update: Update, context, regexp, not_found_message: str, table_info: str):
    logging.info("–í—ã–∑–≤–∞–Ω find. –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: " + regexp + " –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–æ–∏—Å–∫–µ: " + not_found_message)
    user_input = update.message.text
    logging.debug(user_input)
    regexp = re.compile(regexp)
    found = regexp.findall(user_input)
    logging.debug(found)
    if not found:
        update.message.reply_text(not_found_message)
        logging.info("–ó–∞–∫–æ–Ω—á–µ–Ω find. –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END
    findings = ''
    global last_regexp_read
    last_regexp_read = []
    for i,finding in enumerate(found):
        findings += f'{i+1}) {"".join(finding)}\n'
        last_regexp_read.append(("".join(finding),))
    logging.debug(findings)
    update.message.reply_text(findings)
    logging.info("–í—ã–≤–æ–¥ –≤—ã–±–æ—Ä–∞")
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=table_info),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–ù–µ—Ç")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–î–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É?', reply_markup=reply_markup)
    logging.info("–ó–∞–∫–æ–Ω—á–µ–Ω find. –ù–∞–π–¥–µ–Ω–æ")
    return ConversationHandler.END

def verify_password_command(update: Update, context):
    logging.info("–í—ã–∑–≤–∞–Ω verify_password_command")
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ')
    return 'verify_password'

def verify_password(update: Update, context):
    logging.info("–í—ã–∑–≤–∞–Ω verify_password")
    user_input = update.message.text
    logging.debug(user_input)
    password_regexp = re.compile(r'^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$')
    password_test = password_regexp.search(user_input)
    logging.debug(password_test)
    if not password_test:
        update.message.reply_text("–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–¥—ë–∂–µ–Ω")
        logging.info("–ó–∞–∫–æ–Ω—á–µ–Ω verify_password. –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–¥—ë–∂–µ–Ω.")
        return ConversationHandler.END
    update.message.reply_text("–ü–∞—Ä–æ–ª—å –Ω–∞–¥—ë–∂–µ–Ω")
    logging.info("–ó–∞–∫–æ–Ω—á–µ–Ω verify_password. –ü–∞—Ä–æ–ª—å –Ω–∞–¥—ë–∂–µ–Ω.")
    return ConversationHandler.END

def start_command(update: Update, context):
    user = update.effective_user
    update.message.reply_text(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.full_name}. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.')


def help_command(update: Update, context):
    update.message.reply_text(help_message)

def get_ssh_command(update: Update, context, ssh_command: str):
    logging.info("–í—ã–∑–≤–∞–Ω ssh_command. –ö–æ–º–∞–Ω–¥–∞: " + ssh_command)
    logging.debug(context.args)
    connect = ssh_connect()
    if not connect:
        update.message.reply_text("–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ ssh –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è. –ù–æ –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.")
        logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ssh_command. –ù–µ—É–¥–∞—á–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.")
        return
    if not context.args:
        stdin, stdout, stderr = connect.exec_command(ssh_command)
    else:
        stdin, stdout, stderr = connect.exec_command(ssh_command + " | grep " + context.args[0])
    data_out = stdout.read().decode()
    data_err = stderr.read().decode()
    logging.debug(data_out + data_err)
    for i in range(0,len(data_out),4096):
        update.message.reply_text(data_out[i:i+4096])
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ssh_command.")
    
def psql_select(update: Update, context, table_name: str):
    logging.info("–í—ã–∑–≤–∞–Ω psql_select —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã " + table_name)
    connection = None
    try:
        connection = psycopg2.connect(user=PSQL_USERNAME, password=PSQL_PASSWORD, host=PSQL_HOST, port=PSQL_PORT, database="emails_and_phone_numbers")
        cursor = connection.cursor()
        sql_query = sql.SQL("SELECT * FROM {}").format(sql.Identifier(table_name))
        cursor.execute(sql_query)
        data = cursor.fetchall()
        reply = ""
        for row in data:
            reply += f'{row[0]}) {row[1]}\n'
        update.message.reply_text(reply)
        logging.info("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    except (Exception, Error) as error:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL: %s", error)
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
    finally:
        if connection is not None:
            cursor.close()
            connection.close()
            logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")
    return ConversationHandler.END

def psql_insert(update: Update, context):
    query = update.callback_query
    query.answer()
    logging.info("–í—ã–∑–≤–∞–Ω psql_insert —Å –¥–∞–Ω–Ω—ã–º–∏: " + query.data)
    if query.data == "–ù–µ—Ç":
        query.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–µ—Ç. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É")
        return
    table_info = json.loads(query.data)
    connection = None
    global last_regexp_read
    logging.debug(last_regexp_read)
    if not last_regexp_read: return 
    try:
        connection = psycopg2.connect(user=PSQL_USERNAME, password=PSQL_PASSWORD, host=PSQL_HOST, port=PSQL_PORT, database=PSQL_DATABASE_NAME)
        cursor = connection.cursor()
        sql_query = sql.SQL("INSERT INTO {} ({}) VALUES (%s);").format(sql.Identifier(table_info['table_name']), sql.Identifier(table_info['column_name']))
        #sql_query = f"INSERT INTO {table_info['table_name']} ({table_info['column_name']}) VALUES (%s);"
        logging.debug("sql_query: " + repr(sql_query))
        cursor.executemany(sql_query, last_regexp_read)
        connection.commit()
        logging.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–µ–Ω–æ")
        query.message.reply_text("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except (Exception, Error) as error:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL: %s", error)
        query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É")
    finally:
        if connection is not None:
            cursor.close()
            connection.close()
            logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")
    last_regexp_read = []

def get_repl_logs(update: Update, context):
    logging.info("–í—ã–∑–≤–∞–Ω get_repl_logs")
    output = subprocess.run("cat /app/db_logs/* | grep -i repl", shell=True, capture_output=True, text=True).stdout
    logging.debug(output)
    if not output:
        update.message.reply_text("–õ–æ–≥–∏ –æ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    for i in range(0, len(output), 4096):
        update.message.reply_text(output[i:i+4096])

def error_handler(update, context):
    logging.warning('Update "%s" caused error "%s"', update, context.error)

def main():
    logging.info("–ù–∞—á–∞—Ç main")
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    logging.info("–ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
    dp.add_handler(CommandHandler("start", start_command))
    logging.debug("–ö–æ–º–∞–Ω–¥–∞ start –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    dp.add_handler(CommandHandler("help", help_command))
    logging.debug("–ö–æ–º–∞–Ω–¥–∞ help –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    logging.debug("–ò–º–ø–æ—Ä—Ç –∫–æ–º–º–∞–Ω–¥ ssh –∏–∑ json")
    ssh_commands = {}
    try:
        with open("ssh_commands.json", "r") as fp:
            ssh_commands = json.load(fp)
    except Exception as e:
        logging.critical("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ ssh_commands.json" + repr(e))
    logging.debug("–ò–º–ø–æ—Ä—Ç –∫–æ–º–º–∞–Ω–¥ ssh –∏–∑ json –∑–∞–∫–æ–Ω—á–µ–Ω")
    logging.debug(ssh_commands)
    logging.debug("–ö–æ–º–∞–Ω–¥—ã ssh:")
    for telegram_command, linux_comand in ssh_commands.items():
        handler = partial(get_ssh_command, ssh_command = linux_comand)
        dp.add_handler(CommandHandler(telegram_command, handler))
        logging.debug("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ " + telegram_command)
    logging.debug("–ö–æ–º–∞–Ω–¥—ã ssh –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    logging.debug("–ò–º–ø–æ—Ä—Ç –∫–æ–º–º–∞–Ω–¥ regexp –∏–∑ json")
    regexp_commands = {}
    try:
        with open("regexp_commands.json", "r") as fp:
            regexp_commands = json.load(fp)
    except Exception as e:
        logging.critical("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ regexp_commands.json" + repr(e))
    logging.debug("–ò–º–ø–æ—Ä—Ç –∫–æ–º–º–∞–Ω–¥ regexp –∏–∑ json –∑–∞–∫–æ–Ω—á–µ–Ω")
    logging.debug(regexp_commands)
    logging.debug("–ö–æ–º–∞–Ω–¥—ã regexp:")
    for telegram_command, params in regexp_commands.items():
        handler = ConversationHandler(
            entry_points=[CommandHandler(telegram_command, partial(find_command, reply_text = params["reply_text"], next_step = params["next_step"]))],
            states={
                params["next_step"]: [MessageHandler(Filters.text & ~Filters.command, partial(find, regexp = params["regexp"], not_found_message = params["not_found_message"], table_info = json.dumps({"table_name": params["table_name"], "column_name": params["column_name"]})))],
            },
            fallbacks=[]
        )
        dp.add_handler(handler)
        logging.debug("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ " + telegram_command)
    logging.debug("–ö–æ–º–∞–Ω–¥—ã regexp –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    verify_password_handler = ConversationHandler(
        entry_points=[CommandHandler("verify_password", verify_password_command)],
        states={
            "verify_password": [MessageHandler(Filters.text & ~Filters.command, verify_password)],
        },
        fallbacks=[]
    )
    dp.add_handler(verify_password_handler)
    logging.debug("–ö–æ–º–∞–Ω–¥–∞ verify_password –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    logging.debug("–ò–º–ø–æ—Ä—Ç –∫–æ–º–º–∞–Ω–¥ select –∏–∑ json")
    select_commands = {}
    try:
        with open("select_commands.json", "r") as fp:
            select_commands = json.load(fp)
    except Exception as e:
        logging.critical("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ select_commands.json" + repr(e))
    logging.debug("–ò–º–ø–æ—Ä—Ç –∫–æ–º–º–∞–Ω–¥ select –∏–∑ json –∑–∞–∫–æ–Ω—á–µ–Ω")
    logging.debug(select_commands)
    for telegram_command, table_name in select_commands.items():
        handler = partial(psql_select, table_name = table_name)
        dp.add_handler(CommandHandler(telegram_command, handler))
        logging.debug("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ " + telegram_command)
    dp.add_handler(CommandHandler("get_repl_logs", get_repl_logs))
    logging.debug("–ö–æ–º–∞–Ω–¥–∞ get_repl_logs –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    logging.info("–ö–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    logging.info("–î–æ–±–∞–≤–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫")
    dp.add_handler(CallbackQueryHandler(psql_insert))
    logging.info("–î–æ–±–∞–≤–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –æ—à–∏–±–æ–∫")
    dp.add_error_handler(error_handler)
    logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞")
    updater.start_polling()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    updater.idle()
    logging.info("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    
if __name__ == "__main__":
    main()
